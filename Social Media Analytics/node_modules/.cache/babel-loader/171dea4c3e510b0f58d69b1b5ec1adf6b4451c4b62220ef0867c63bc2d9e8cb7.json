{"ast":null,"code":"const API_URL = 'http://20.244.56.144/test';\nexport async function fetchData() {\n  try {\n    const usersResponse = await fetch(`${API_URL}/users`);\n    if (!usersResponse.ok) {\n      throw new Error(`Users API error: ${usersResponse.status}`);\n    }\n    const users = await usersResponse.json();\n    let posts = [];\n    let comments = [];\n    for (const userId of Object.keys(users)) {\n      const postsResponse = await fetch(`${API_URL}/users/${userId}/posts`);\n      if (postsResponse.ok) {\n        const userPosts = await postsResponse.json();\n        posts = posts.concat(userPosts.posts);\n      }\n    }\n    for (const post of posts) {\n      const commentsResponse = await fetch(`${API_URL}/posts/${post.id}/comments`);\n      if (commentsResponse.ok) {\n        const postComments = await commentsResponse.json();\n        comments = comments.concat(postComments.comments);\n      }\n    }\n    return {\n      users,\n      posts,\n      comments\n    };\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    throw new Error('Failed to fetch data. Please try again later.');\n  }\n}\nlet cachedData = null;\nlet lastFetchTime = 0;\nconst CACHE_DURATION = 60 * 1000;\nexport async function getCachedData() {\n  const now = Date.now();\n  if (!cachedData || now - lastFetchTime > CACHE_DURATION) {\n    try {\n      cachedData = await fetchData();\n      lastFetchTime = now;\n    } catch (error) {\n      console.error('Error updating cache:', error);\n      throw error;\n    }\n  }\n  return cachedData;\n}","map":{"version":3,"names":["API_URL","fetchData","usersResponse","fetch","ok","Error","status","users","json","posts","comments","userId","Object","keys","postsResponse","userPosts","concat","post","commentsResponse","id","postComments","error","console","cachedData","lastFetchTime","CACHE_DURATION","getCachedData","now","Date"],"sources":["/Users/mishr/Documents/GitHub/RA2211030020078/Social Media Analytics/src/api.ts"],"sourcesContent":["const API_URL = 'http://20.244.56.144/test';\n\ntype Users = {\n  [key: string]: string; \n};\n\ntype Post = {\n  id: number;\n  userId: number;\n  content: string;\n};\n\ntype Comment = {\n  id: number;\n  postid: number;\n  content: string;\n};\n\nexport type ApiResponse = {\n  users: Users;\n  posts: Post[];\n  comments: Comment[];\n};\n\nexport async function fetchData(): Promise<ApiResponse> {\n  try {\n    const usersResponse = await fetch(`${API_URL}/users`);\n    if (!usersResponse.ok) {\n      throw new Error(`Users API error: ${usersResponse.status}`);\n    }\n    const users: Users = await usersResponse.json();\n\n    let posts: Post[] = [];\n    let comments: Comment[] = [];\n\n    for (const userId of Object.keys(users)) {\n      const postsResponse = await fetch(`${API_URL}/users/${userId}/posts`);\n      if (postsResponse.ok) {\n        const userPosts = await postsResponse.json();\n        posts = posts.concat(userPosts.posts);\n      }\n    }\n\n    for (const post of posts) {\n      const commentsResponse = await fetch(`${API_URL}/posts/${post.id}/comments`);\n      if (commentsResponse.ok) {\n        const postComments = await commentsResponse.json();\n        comments = comments.concat(postComments.comments);\n      }\n    }\n\n    return { users, posts, comments };\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    throw new Error('Failed to fetch data. Please try again later.');\n  }\n}\n\nlet cachedData: ApiResponse | null = null;\nlet lastFetchTime = 0;\nconst CACHE_DURATION = 60 * 1000; \n\nexport async function getCachedData(): Promise<ApiResponse> {\n  const now = Date.now();\n  if (!cachedData || now - lastFetchTime > CACHE_DURATION) {\n    try {\n      cachedData = await fetchData();\n      lastFetchTime = now;\n    } catch (error) {\n      console.error('Error updating cache:', error);\n      throw error;\n    }\n  }\n  return cachedData;\n}\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,2BAA2B;AAwB3C,OAAO,eAAeC,SAASA,CAAA,EAAyB;EACtD,IAAI;IACF,MAAMC,aAAa,GAAG,MAAMC,KAAK,CAAC,GAAGH,OAAO,QAAQ,CAAC;IACrD,IAAI,CAACE,aAAa,CAACE,EAAE,EAAE;MACrB,MAAM,IAAIC,KAAK,CAAC,oBAAoBH,aAAa,CAACI,MAAM,EAAE,CAAC;IAC7D;IACA,MAAMC,KAAY,GAAG,MAAML,aAAa,CAACM,IAAI,CAAC,CAAC;IAE/C,IAAIC,KAAa,GAAG,EAAE;IACtB,IAAIC,QAAmB,GAAG,EAAE;IAE5B,KAAK,MAAMC,MAAM,IAAIC,MAAM,CAACC,IAAI,CAACN,KAAK,CAAC,EAAE;MACvC,MAAMO,aAAa,GAAG,MAAMX,KAAK,CAAC,GAAGH,OAAO,UAAUW,MAAM,QAAQ,CAAC;MACrE,IAAIG,aAAa,CAACV,EAAE,EAAE;QACpB,MAAMW,SAAS,GAAG,MAAMD,aAAa,CAACN,IAAI,CAAC,CAAC;QAC5CC,KAAK,GAAGA,KAAK,CAACO,MAAM,CAACD,SAAS,CAACN,KAAK,CAAC;MACvC;IACF;IAEA,KAAK,MAAMQ,IAAI,IAAIR,KAAK,EAAE;MACxB,MAAMS,gBAAgB,GAAG,MAAMf,KAAK,CAAC,GAAGH,OAAO,UAAUiB,IAAI,CAACE,EAAE,WAAW,CAAC;MAC5E,IAAID,gBAAgB,CAACd,EAAE,EAAE;QACvB,MAAMgB,YAAY,GAAG,MAAMF,gBAAgB,CAACV,IAAI,CAAC,CAAC;QAClDE,QAAQ,GAAGA,QAAQ,CAACM,MAAM,CAACI,YAAY,CAACV,QAAQ,CAAC;MACnD;IACF;IAEA,OAAO;MAAEH,KAAK;MAAEE,KAAK;MAAEC;IAAS,CAAC;EACnC,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAM,IAAIhB,KAAK,CAAC,+CAA+C,CAAC;EAClE;AACF;AAEA,IAAIkB,UAA8B,GAAG,IAAI;AACzC,IAAIC,aAAa,GAAG,CAAC;AACrB,MAAMC,cAAc,GAAG,EAAE,GAAG,IAAI;AAEhC,OAAO,eAAeC,aAAaA,CAAA,EAAyB;EAC1D,MAAMC,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;EACtB,IAAI,CAACJ,UAAU,IAAII,GAAG,GAAGH,aAAa,GAAGC,cAAc,EAAE;IACvD,IAAI;MACFF,UAAU,GAAG,MAAMtB,SAAS,CAAC,CAAC;MAC9BuB,aAAa,GAAGG,GAAG;IACrB,CAAC,CAAC,OAAON,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF;EACA,OAAOE,UAAU;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}