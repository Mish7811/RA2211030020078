{"ast":null,"code":"const API_URL = 'http://20.244.56.144/test';\nexport async function fetchData() {\n  try {\n    const [usersResponse, postsResponse] = await Promise.all([fetch(`${API_URL}/users`), fetch(`${API_URL}/posts`)]);\n    if (!usersResponse.ok || !postsResponse.ok) {\n      throw new Error(`HTTP Error! Users: ${usersResponse.status}, Posts: ${postsResponse.status}`);\n    }\n    const users = await usersResponse.json();\n    const posts = await postsResponse.json();\n    return {\n      users,\n      posts\n    };\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    throw new Error('Failed to fetch data. Please try again later.');\n  }\n}\nlet cachedData = null;\nlet lastFetchTime = 0;\nconst CACHE_DURATION = 60 * 1000;\nexport async function getCachedData() {\n  const now = Date.now();\n  if (!cachedData || now - lastFetchTime > CACHE_DURATION) {\n    try {\n      cachedData = await fetchData();\n      lastFetchTime = now;\n    } catch (error) {\n      console.error('Error updating cache:', error);\n      throw error;\n    }\n  }\n  return cachedData;\n}","map":{"version":3,"names":["API_URL","fetchData","usersResponse","postsResponse","Promise","all","fetch","ok","Error","status","users","json","posts","error","console","cachedData","lastFetchTime","CACHE_DURATION","getCachedData","now","Date"],"sources":["/Users/mishr/Documents/GitHub/RA2211030020078/Social Media Analytics/src/api.ts"],"sourcesContent":["const API_URL = 'http://20.244.56.144/test';\n\ntype Users = {\n  [key: string]: string; \n};\n\ntype Post = {\n  id: number;\n  userId: number;\n  content: string;\n  timestamp: string;\n  comments: string;\n};\n\nexport type ApiResponse = {\n  users: Users;\n  posts: Post[];\n};\n\nexport async function fetchData(): Promise<ApiResponse> {\n  try {\n    const [usersResponse, postsResponse] = await Promise.all([\n      fetch(`${API_URL}/users`),\n      fetch(`${API_URL}/posts`)\n    ]);\n\n    if (!usersResponse.ok || !postsResponse.ok) {\n      throw new Error(`HTTP Error! Users: ${usersResponse.status}, Posts: ${postsResponse.status}`);\n    }\n\n    const users: Users = await usersResponse.json();\n    const posts: Post[] = await postsResponse.json();\n\n    return { users, posts };\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    throw new Error('Failed to fetch data. Please try again later.');\n  }\n}\n\nlet cachedData: ApiResponse | null = null;\nlet lastFetchTime = 0;\nconst CACHE_DURATION = 60 * 1000; \n\nexport async function getCachedData(): Promise<ApiResponse> {\n  const now = Date.now();\n  if (!cachedData || now - lastFetchTime > CACHE_DURATION) {\n    try {\n      cachedData = await fetchData();\n      lastFetchTime = now;\n    } catch (error) {\n      console.error('Error updating cache:', error);\n      throw error;\n    }\n  }\n  return cachedData;\n}\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,2BAA2B;AAmB3C,OAAO,eAAeC,SAASA,CAAA,EAAyB;EACtD,IAAI;IACF,MAAM,CAACC,aAAa,EAAEC,aAAa,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACvDC,KAAK,CAAC,GAAGN,OAAO,QAAQ,CAAC,EACzBM,KAAK,CAAC,GAAGN,OAAO,QAAQ,CAAC,CAC1B,CAAC;IAEF,IAAI,CAACE,aAAa,CAACK,EAAE,IAAI,CAACJ,aAAa,CAACI,EAAE,EAAE;MAC1C,MAAM,IAAIC,KAAK,CAAC,sBAAsBN,aAAa,CAACO,MAAM,YAAYN,aAAa,CAACM,MAAM,EAAE,CAAC;IAC/F;IAEA,MAAMC,KAAY,GAAG,MAAMR,aAAa,CAACS,IAAI,CAAC,CAAC;IAC/C,MAAMC,KAAa,GAAG,MAAMT,aAAa,CAACQ,IAAI,CAAC,CAAC;IAEhD,OAAO;MAAED,KAAK;MAAEE;IAAM,CAAC;EACzB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAM,IAAIL,KAAK,CAAC,+CAA+C,CAAC;EAClE;AACF;AAEA,IAAIO,UAA8B,GAAG,IAAI;AACzC,IAAIC,aAAa,GAAG,CAAC;AACrB,MAAMC,cAAc,GAAG,EAAE,GAAG,IAAI;AAEhC,OAAO,eAAeC,aAAaA,CAAA,EAAyB;EAC1D,MAAMC,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;EACtB,IAAI,CAACJ,UAAU,IAAII,GAAG,GAAGH,aAAa,GAAGC,cAAc,EAAE;IACvD,IAAI;MACFF,UAAU,GAAG,MAAMd,SAAS,CAAC,CAAC;MAC9Be,aAAa,GAAGG,GAAG;IACrB,CAAC,CAAC,OAAON,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF;EACA,OAAOE,UAAU;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}